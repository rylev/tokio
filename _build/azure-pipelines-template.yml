jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stable:
        rustup_toolchain: stable
      beta:
        rustup_toolchain: beta
      nightly:
        rustup_toolchain: nightly
      # This represents the minimum Rust version supported by Tokio. Updating this
      # should be done in a dedicated PR and cannot be greater than two 0.x
      # releases prior to the current stable.
      minimum_supported_version:
        rustup_toolchain: 1.26.0
  steps:
  - ${{ if ne(parameters.name, 'Windows') }}:
    # Linux and macOS.
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install rust
  - ${{ if eq(parameters.name, 'Windows') }}:
    # Windows.
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      displayName: Install rust (windows)
  # All platforms.
  - script: |
        cargo check --all
    displayName: Query rust and cargo versions
    condition: eq(variables['rustup_toolchain'], '1.26.0')

  - script: |
      $HOME/.cargo/bin/cargo fmt -- --check
      alias check="$HOME/.cargo/bin/cargo check --no-default-features"
      shopt -s expand_aliases
      check
      check --features codec
      check --features fs
      check --features io
      check --features reactor
      check --features rt-full
      check --features tcp
      check --features timer
      check --features udp
      check --features uds
    displayName: Run rustfmt and cargo check
    condition: eq(variables['rustup_toolchain'], 'stable')

  # Test the async / await preview. We don't want to block PRs on this failing though.
  - script: |
      cd tokio-async-await
      cargo check --all
    displayName: Test async/await
    continueOnError: true
    condition: eq(variables['rustup_toolchain'], 'nightly')

  # This runs TSAN against nightly and allows failures to propagate up.
  - bash: |
        set -e
        # Make sure the benchmarks compile
        cargo build --benches --all

        export ASAN_OPTIONS="detect_odr_violation=0 detect_leaks=0"
        export TSAN_OPTIONS="suppressions=`pwd`/ci/tsan"
        export RUST_BACKTRACE=1

        # === tokio-timer ====

        # Run address sanitizer
        RUSTFLAGS="-Z sanitizer=address" \
        cargo test -p tokio-timer --test hammer --target x86_64-unknown-linux-gnu

        # Run thread sanitizer
        RUSTFLAGS="-Z sanitizer=thread" \
        cargo test -p tokio-timer --test hammer --target x86_64-unknown-linux-gnu

        # === tokio-threadpool ====

        # Run address sanitizer
        RUSTFLAGS="-Z sanitizer=address" \
        cargo test -p tokio-threadpool --tests --target x86_64-unknown-linux-gnu

        # Run thread sanitizer
        RUSTFLAGS="-Z sanitizer=thread" \
        cargo test -p tokio-threadpool --tests --target x86_64-unknown-linux-gnu
    displayName: Run thread sanitizer checks on nightly
    env: { TSAN: 'yes' }
    condition: eq(variables['rustup_toolchain'], 'nightly')

  - bash: cargo doc
    displayName: Run cargo doc on nightly
    continueOnError: true
    condition: eq(variables['rustup_toolchain'], 'nightly')

  - bash: |
        set -e
        if [[ "$TARGET" ]]
        then
            rustup target add $TARGET
            cargo check --all --exclude tokio-tls --target $TARGET
            cargo check --tests --all --exclude tokio-tls --target $TARGET
        else
            # Limit the execution time of loom tests.
            export LOOM_MAX_DURATION=10
            cargo test --all --no-fail-fast
            cargo test -p tokio-buf --no-default-features
            cargo doc --all
        fi
    displayName: Build and run tests on all targets